{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Encode.svelte",
    "Format.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import \"bulma/css/bulma.css\";\n  import \"bulma-checkradio/dist/css/bulma-checkradio.min.css\";\n  //\n  import { Field, Tabs, NavBar, Footer } from \"./ui/index.svelte\";\n  import * as Icon from \"./ui/icon\";\n  //\n  import { Reg, Encode, Editor, State,Format } from \"./components/index.svelte\";\n\n  let input = \"\";\n  let output = \"\";\n  let currentTab = \"1\";\n\n  let tabs = [\n    { value: \"1\", text: \"正则\" },\n    { value: \"2\", text: \"编码\" },\n    { value: \"3\", text: \"脚本\" },\n    { value: \"4\", text: \"格式\" },\n    {value:\"5\",text:\"统计\"}\n  ];\n  let compoents = {\n    \"1\": Reg,\n    \"2\": Encode,\n    \"3\": Editor,\n    \"4\": Format,\n    \"5\": State,\n  };\n\n  function copy() {\n    let obj = document.getElementById(\"output\");\n    obj.focus();\n    obj.select();\n    try {\n      if (document.execCommand(\"copy\", false, null)) {\n      } else {\n        console.log(\"不支持 execCommand\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  function copyToInput() {\n    input = output;\n  }\n</script>\n\n<main>\n  <NavBar hasShadow=\"true\">\n    <div slot=\"navbar-brand\" class=\"navbar-item\">\n      <img src=\"./apple-touch-icon.png\" alt=\"logo\"/>&nbsp;<h2>文字处理工具</h2>\n    </div>\n    <div slot=\"navbar-end\" class=\"navbar-item\">\n      <div class=\"field is-grouped\">\n        <div class=\"control\">\n          <a\n            class=\"button is-link is-light\"\n            href=\"https://github.com/owlzou/text-tool\"\n            target=\"_blank\">\n            {@html Icon.github}\n            <span>GitHub</span></a>\n        </div>\n      </div>\n    </div>\n  </NavBar>\n  <!--  -->\n  <section>\n    <div class=\"container\">\n      <Field label=\"输入文字\">\n        <textarea class=\"textarea\" placeholder=\"输入文字\" bind:value={input} />\n      </Field>\n      <Tabs bind:value={currentTab} options={tabs} />\n      <svelte:component this={compoents[currentTab]} {input} bind:output />\n      <hr />\n      <Field label=\"输出文字\">\n        <textarea\n          id=\"output\"\n          class=\"textarea\"\n          placeholder=\"输出文字\">{output}</textarea>\n      </Field>\n      <button class=\"button is-primary\" on:click={copy}>\n        {@html Icon.copy}复制</button>\n      <button\n        class=\"button is-light\"\n        on:click={copyToInput}>{@html Icon.arrowNarrowUp}复制到输入框</button>\n    </div>\n  </section>\n  <Footer>\n    <div>文字处理工具✒️2020-{new Date().getFullYear()}</div>\n  </Footer>\n</main>\n<style>\n  .container {\n    padding: 20px;\n  }\n  :global(.button .icon-tabler) {\n    margin-right: 5px !important;\n  }\n  #output{\n    font-family: 'sarasa mono sc','lxgw wenkai mono','Courier New', Courier, monospace;\n  }\n</style>\n",
    "<script>\n  import { Base64 } from \"js-base64\";\n  export let input = \"\";\n  export let output = \"\";\n</script>\n\n<div class=\"columns\">\n  <p class=\"control\">\n    <button class=\"button\" on:click={() => (output = Base64.encode(input))}\n      >Base64编码</button\n    >\n  </p>\n  <p class=\"control\">\n    <button class=\"button\" on:click={() => (output = Base64.decode(input))}\n      >Base64解码</button\n    >\n  </p>\n\n  <p class=\"control\">\n    <button\n      class=\"button\"\n      on:click={() => {\n        output = encodeURI(input);\n      }}>encodeURI</button\n    >\n  </p>\n  <p class=\"control\">\n    <button\n      class=\"button\"\n      on:click={() => {\n        output = decodeURI(input);\n      }}>decodeURI</button\n    >\n  </p>\n\n  <p class=\"control\">\n    <button\n      class=\"button\"\n      on:click={() => {\n        output = encodeURIComponent(input);\n      }}>encodeURIComponent</button\n    >\n  </p>\n  <p class=\"control\">\n    <button\n      class=\"button\"\n      on:click={() => {\n        output = decodeURIComponent(input);\n      }}>decodeURIComponent</button\n    >\n  </p>\n\n  <p class=\"control\">\n    <button\n      class=\"button\"\n      on:click={() => {\n        output = escape(input).replace(/%/g,\"\\\\\");\n      }}>Unicode编码</button\n    >\n  </p>\n  <p class=\"control\">\n    <button\n      class=\"button\"\n      on:click={() => {\n        output = unescape(input.replace(/\\\\/g,\"%\"));\n      }}>Unicode解码</button\n    >\n  </p>\n</div>\n\n<style>\n  .columns {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .columns .control {\n    margin: 5px;\n  }\n</style>\n",
    "<script>\n  export let input = \"\";\n  export let output = \"\";\n\n  /**\n   * 格式化表格\n   *\n   * @param {string} text\n   * @param {boolean} [wikitext=false] 是否是 wikitext 格式，否则为 markdown 格式\n   * @return {string}\n   */\n  function formatTable(text, wikitext = false) {\n    if (\n      text.trim().length == 0 ||\n      text.search(\"\\n\") < 0 ||\n      text.search(\"|\") < 0\n    ) {\n      return \"\";\n    }\n\n    if (wikitext) {\n      text = text.replace(/\\[\\[(.*)\\|(.*)\\]\\]/g, \"[[$1§$2]]\");\n    } // 替换掉连接中的竖线\n\n    text = text.split(\"\\n\");\n\n    // 给每个单元格计数\n    let len_arr = []; //number[][]\n    let max_col = new Array(text[0].split(/\\|/).length - 2).fill(-1); // 记录每列中最长的长度\n    const split_line = hasSplitLine(text, wikitext);\n\n    text = text.map((line, index) => {\n      line = line.split(/\\|/);\n      line.pop();\n      line.shift();\n\n      let line_len_arr = line.map((cell, i) => {\n        line[i] = cell.trim();\n        // 不是分割行\n        if (split_line && index === 1) {\n          return 3;\n        } else {\n          // 计算竖列最大长度\n          let l = count(line[i]);\n          max_col[i] = max_col[i] < l ? l : max_col[i];\n          return l;\n        }\n      });\n\n      len_arr.push(line_len_arr);\n      return line;\n    });\n\n    if (wikitext) {\n      text = text\n        .map((row) => {\n          row = row\n            .map((e, i) => e.padEnd(max_col[i] - (count(e) - e.length)))\n            .join(\"|\");\n\n          return \"|\" + row + \"|\";\n        })\n        .join(\"\\n\")\n        .replace(/§/g, \"|\");\n    } else {\n      text = text\n        .map((row, index) => {\n          if (index == 1 && split_line) {\n            //分隔行\n            row = row\n              .map((e, i) => {\n                // 查看有无左右对齐\n                let n = \"\".padEnd(max_col[i], \"-\");\n\n                if (e.match(/^:/)) {\n                  n = replaceStr(n, 0, \":\");\n                }\n                if (e.match(/:$/)) {\n                  n = replaceStr(n, n.length - 1, \":\");\n                }\n\n                return ` ${n} `;\n              })\n              .join(\"|\");\n          } else {\n            row = row\n              .map(\n                (e, i) =>\n                  \" \" + e.padEnd(max_col[i] - (count(e) - e.length)) + \" \"\n              )\n              .join(\"|\");\n          }\n          return \"|\" + row + \"|\";\n        })\n        .join(\"\\n\");\n    }\n\n    return text;\n  }\n\n  function replaceStr(str, index, char) {\n    return str.substring(0, index) + char + str.substring(index + 1);\n  }\n\n  /**\n   * 探测是否有markdown表格的分隔线\n   *\n   * @param {string} text\n   * @param {bool} wikitext\n   * @return {bool}\n   */\n  function hasSplitLine(text, wikitext) {\n    if (text.length > 2) {\n      let cells = text[1].split(/\\|/);\n      cells = cells.splice(1, cells.length - 2);\n      return cells.every((cell) => cell.trim().match(/^:?-+:?$/)) && !wikitext;\n    }\n    return false;\n  }\n\n  /**\n   * 计算实际占用的位数（cjk占两格)\n   *\n   * @param {string} word\n   * @return {number}\n   */\n  function count(word) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (escape(word[i]).length > 4) {\n        count += 2;\n      } else {\n        count++;\n      }\n    }\n    return count;\n  }\n</script>\n\n<div class=\"columns\">\n  <p class=\"control\">\n    <button class=\"button\" on:click={() => (output = formatTable(input, false))}\n      >格式化 Markdown 表格</button\n    >\n  </p>\n\n  <p class=\"control\">\n    <button class=\"button\" on:click={() => (output = formatTable(input, true))}\n      >格式化 TiddlyWiki 表格</button\n    >\n  </p>\n</div>\n\n<style>\n  .columns {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .columns .control {\n    margin: 5px;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AA4FE,UAAU,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,AACf,CAAC,AACO,oBAAoB,AAAE,CAAC,AAC7B,YAAY,CAAE,GAAG,CAAC,UAAU,AAC9B,CAAC,AACD,sBAAO,CAAC,AACN,WAAW,CAAE,gBAAgB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,AACpF,CAAC;AC7BD,QAAQ,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,sBAAQ,CAAC,QAAQ,cAAC,CAAC,AACjB,MAAM,CAAE,GAAG,AACb,CAAC;AC6ED,QAAQ,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,sBAAQ,CAAC,QAAQ,cAAC,CAAC,AACjB,MAAM,CAAE,GAAG,AACb,CAAC"
}